
user  www-data;
worker_processes  4;

error_log  /var/log/nginx/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid        /run/openresty/openresty.pid;

events {
    use epoll;
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  /var/log/nginx/access.log  main;
    access_log off;
    tcp_nodelay on;
    reset_timedout_connection on;

    sendfile        on;
    tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;
    keepalive_requests 10000;

    client_body_timeout 10;
    send_timeout 2;

    gzip  on;
    gzip_min_length 10240;

    init_by_lua "
       dbus = require 'lua-dbus'
       local stack = require 'resty.stack'
       dbus.init()
       app = stack:new({ debug = true })
       auth = require 'openbmc.auth'.check_sid
       app:use('api/storage/SELF/FANS_PWM$', 'openbmc.api.fanpwm')
       app:use('api/storage/SELF/FAN_PWM_(?<key>[0-9]+)$', 'openbmc.api.fanpwm')
       app:use('api/storage/SELF/LED_(?<key>[1-7])$', 'openbmc.api.leds')
       app:use('api/storage/(?<key>.+)$', 'openbmc.api.storage')
       app:use('api/storage$', 'openbmc.api.storage')
       app:use('api/proc/(?<unit>[^/]+)$', 'openbmc.api.proc')
       app:use('api/(?<path>.*)/attr/(?<prop>[^/]+)$', 'openbmc.api.attr')
       app:use('api/(?<paths>.*)$', 'openbmc.api')
       app:use('login', 'openbmc.auth')
       app:use('logout', 'openbmc.auth')
    ";

    lua_shared_dict db 1M;
    lua_shared_dict auth 128k;

    server {
        listen       80;
        listen       443 ssl;
        listen       [::]:80;
        listen       [::]:443 ssl;
        listen       unix:/run/openresty/socket;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        # ssl                  on;
        ssl_certificate      cert.pem;
        ssl_certificate_key  cert.key;

        ssl_session_timeout  5m;
        keepalive_timeout 70;

        # ssl_protocols  SSLv2 SSLv3 TLSv1;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_dhparam /etc/openresty/dhparam.pem;
        # ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;
        ssl_prefer_server_ciphers   on;

        ssl_session_cache   shared:SSL:1m;

        location /org {
             access_by_lua "if not auth() then ngx.exit(401) end";
             proxy_pass http://unix:/run/phoshpor-gevent.socket;
        }

        location /xyz {
            access_by_lua "if not auth() then ngx.exit(401) end";
	    proxy_pass http://unix:/run/phoshpor-gevent.socket;
        }

        location /list {
            access_by_lua "if not auth() then ngx.exit(401) end";
	    proxy_pass http://unix:/run/phoshpor-gevent.socket;
        }

        location /enumerate {
            access_by_lua "if not auth() then ngx.exit(401) end";
            proxy_pass http://unix:/run/phoshpor-gevent.socket;
        }

        location / {
            content_by_lua "
                 app.authorize = auth
                 app:run()
            ";
        }

        # error_page 500 401 404 /api/error;

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /var/www/localhost/html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
}
