#!/bin/sh

#
# Low-level functions (GPIO, I2C)
#

SOC_GPIO_BASE=320
LED_FAIL='0 I.5'
LED_OK='0 I.4'

# Calculate GPIO number
# Accepts: [0-9]*, [0-9].[0-9]*, [A-Z].[0-9]*
gpio_n()
{
	local base="$1"
	local n="$2"
        # the X.Y pin passed
        if [ "${n%%.*}" != "$n" ]; then
                local port="${n%%.*}"
                local pin="${n##*.}"
		case "$port" in
		[0-9]*) ;;
		[A-Z])
			# Calculate offset A=65
			port=$(($(printf "%d" "'$port")-65))
			base=$SOC_GPIO_BASE
			;;
		esac
		n="$((port * 8 + pin))"
        fi
	echo -n "$((base + n))"
}

# Enable GPIO
gpio_en()
{
	local g="$(gpio_n $1 $2)"
	[ ! -e "/sys/class/gpio/gpio$g" ] || return 0
	echo "$g" > /sys/class/gpio/export
}

# Disable GPIO
gpio_del()
{
	local g="$(gpio_n $1 $2)"
	[ -e "/sys/class/gpio/gpio$g" ] || return 0
	echo "$g" > /sys/class/gpio/unexport
}

# Get GPIO value
gpio()
{
	[ -z "$3" ] || { gpio_out $@; return $?; }
	local gpio="/sys/class/gpio/gpio$(gpio_n $1 $2)"
	[ -e "$gpio" ]
	echo in > "$gpio/direction"
	cat "$gpio/value"
}

gpio_out()
{
	[ -n "$3" ] && [ "$3" = 0 -o "$3" = 1 ]
	local gpio="/sys/class/gpio/gpio$(gpio_n $1 $2)"
	[ -e "$gpio" ]
	echo out > "$gpio/direction"
	echo "$3" > "$gpio/value"
}

gpio_is_changed()
{
        local retry=0
        local max_retry=${3:-60}
	local v=$(gpio $1 $2)
        while [ $(gpio $1 $2) = $v -a $retry -lt $max_retry ]; do
                sleep 1
                retry=$((retry + 1))
        done
        [ $retry != $max_retry ]
}

# Add i2c device instance
i2c_en()
{
	local bus="$1"
        local slave="$(printf "%04x" $2)"
	local drv="$3"
	[ ! -e "/sys/bus/i2c/devices/$bus-$slave" ] || return 0
	echo "$drv" "0x$slave" > "/sys/bus/i2c/devices/i2c-$bus/new_device"
}

i2c_del()
{
	local bus="$1"
	local slave="$(printf "%04x" $2)"
	[ -e "/sys/bus/i2c/devices/$bus-$slave" ] || return 0
	echo "0x$slave" > "/sys/bus/i2c/devices/i2c-$bus/delete_device"
}

# Select/deselect a channel
i2c_mux()
{
	local bus="$1"
	local slave="$(printf "0x%02x" $2)"
	local chan="$3"
	if [ "$3" -lt 0 -o "$3" -gt 7 ]; then
		# Deselect
		chan=0
	else
		chan=$((1 << $3))
	fi
	i2cset -y "$bus" "$slave" 0 "$chan"
}

# Deselect all channels
i2c_demux()
{
	i2c_mux "$1" "$2" -1
}

# Do i2cdetect in a fashion way
i2c_scan()
{
	# TODO: check the i2cdetect exit code
	i2cdetect -y "$1" | sed 's, [0-9a-f]\{2\}, UU,g'
}

# Request GPIO base
io_chip()
{
	local base=0
	local bus="$1"
	local slave="$(printf "%04x" $2)"
	for b in /sys/class/gpio/gpiochip*; do
		local path="$(readlink -f $b)"
		local chip="${b##*/}"
		[ "$path" != "${path%%/$bus-$slave/gpio/$chip}" ] || continue
		base="${chip##gpiochip}"
		break
	done
	echo -n "$base"
}

# Enable IO expander, optionally request for one GPIO pin
io_en()
{
	local bus="$1"
	local slave="$2"
	i2c_en "$bus" "$slave" pca9675
	[ -n "$3" ] || return 0
	io_gpio_en "$bus" "$slave" "$3"
}

# Disalbe IO expander
io_del()
{
	i2c_del "$1" "$2"
}

# Enable specific GPIO on IO expander
io_gpio_en()
{
	local io="$(io_chip "$1" "$2")"
	gpio_en "$io" "$3"
}

# Get/set IO expander GPIO value
io_gpio()
{
	local n="$3"
	local io="$(io_chip "$1" "$2")"
	gpio "$io" "$3" $4
}

# Set LED state on
led_on()
{
	gpio_out $1 $2 0
}

# Set LED state off
led_off()
{
	gpio_out $1 $2 1
}

led_blink()
{
	(while :; do led_on $1 $2; sleep 1; led_off $1 $2; sleep 1; done) &
	local pid=$!
	read enter
	kill $pid
	wait $pid ||:
}

#
# Sensors
#

# Enable sensor
sdr_en()
{
	i2c_en "$1" "$2" "$3"
}

# Disable sensor
sdr_del()
{
	i2c_del "$1" "$2"
}

# Get hwmon handle for the sensor
sdr_hwmon()
{
	local bus="$1"
	local slave="$(printf "%04x" $2)"
	local hwmon="/sys/bus/i2c/devices/$bus-$slave/hwmon"
	[ -e "$hwmon" ] || return
	echo -n /sys/bus/i2c/devices/$bus-$slave/hwmon/hwmon*
}

# Get sensors reading
sdr_read()
{
	sensors $(printf "*-i2c-%d-%x" $1 $2)
}

sdr_cache()
{
	sdr_read $@ 1>/tmp/sdr-$1-$2
}

sdr_get()
{
	sdr_read "$1" "$2" | awk "/^$3:/ { print \$1, \$2 }"
}

# Get value from cached output
sdr_get_cached()
{
	sdr_cache "$1" "$2"
	awk "/^$3:/ { print \$2 }" /tmp/sdr-$1-$2
}

# Set specific value to sensor
sdr_set()
{
	local hwmon=$(sdr_hwmon "$1" "$2")
	[ -n "$hwmon" ] || { rc=$?; echo "HWMON not found for $1-$2" 1>&2; return $rc; }
	find -L $hwmon -maxdepth 3 | fgrep -v subsystem | awk "/\/$3\$/ { f=1; print } END { if (!f) exit(2) }" | while read sdr; do
		echo "$4" > $sdr
		cat $sdr | xargs echo "$sdr" >> /tmp/log
	done
	#if [ ! -e "$hwmon/$3" ]; then
	#	hwmon="$hwmon/device"
	#	[ -e "$hwmon/$3" ] || { echo "Property $3 for HWMON $1-$2 not found" 1>&2; return 1; }
	#fi
}

#
# Higher-level functions
#

# Get board type, use `-f' to force detect
board_type()
{
	if [ -e "/tmp/openrack-board-type" -a "$1" != "-f" ]; then
		cat /tmp/openrack-board-type
		return
	fi
	# GPIOS4
	gpio_en 0 S.4
	if [ "$(gpio 0 S.4)" -eq 1 ]; then
        	t=RMC
	else
        	t=CB
	fi
	# Cache board type
	echo -n "$t" | tee /tmp/openrack-board-type
}

# Get board address, use `-f' to force detect
board_addr()
{
	if [ -e "/tmp/openrack-board-address" -a "$1" != "-f" ]; then
		cat /tmp/openrack-board-address
		return
	fi
	case "$(board_type $1)" in
	RMC)
		gpio_en 0 A.0
		gpio_en 0 A.1
		p="$(gpio 0 A.0)$(gpio 0 A.1)"
		case "$p" in
		00) p=0 ;;
		11) p=1 ;;
		esac
		;;
	CB)
        	# GPIOB1-B3
        	gpio_en 0 B.1
        	gpio_en 0 B.2
        	gpio_en 0 B.3
        	p=$((($(gpio 0 B.3) << 2) | ($(gpio 0 B.2) << 1) | $(gpio 0 B.1)))
		;;
	esac
	# Cache board address
	echo -n "$p" | tee /tmp/openrack-board-address
}

# Detect board type/number
board_detect()
{
	board_name -f 1>/dev/null
}

board_position()
{
	local t=$(board_type $1)
	local p=$(board_addr $1)
	case "$t" in
	RMC)
		case "$p" in
		0) p=A ;;
		1) p=B ;;
		esac
		;;
	CB)
		# Fixup address
		[ "$p" -lt 5 ] || p=$((p - 1))
		;;
	esac
	echo -n "$p"
}

board_name()
{
	local t=$(board_type $1)
	local p=$(board_position $1)
	echo -n "$t-$p"
}

board_list()
{
	i2cdetect -y $I2C_common | awk '/^70:/ { print substr($0, 9) }' | sed 's,-- ,,g; s,7,,g' | tr '4567' ' 456'
}

frag()
{
	source $WD/common.d/$1
}

test_init()
{
	local t=$(board_type $1)
	test_cleanup
	log "Running on $(board_name)\n"
	${t}_config
	gpio_en $LED_OK
	gpio_en $LED_FAIL
	led_off $LED_OK
	led_off $LED_FAIL
}

run_cmd_log()
{
        echo ">>> $@ <<<" >>/tmp/log
        echo ">>> $@ <<<" >>/tmp/log.err
}

run_cmd()
{
	run_cmd_log $@
	local rc=0
	# eval
	eval $@ 2>>/tmp/log.err 1>/tmp/log.shot || rc=$?
	cat /tmp/log.shot >> /tmp/log
	return $rc
}

log()
{
        printf "$1"
        echo -e $1 | tee -a /tmp/log.err >> /tmp/log
}

run_header()
{
	led_off $LED_OK
	printf "  -> %-60s" "$1"
        echo -e $1 | tee -a /tmp/log.err >> /tmp/log
	echo "----------------- $(date) -----" | tee -a /tmp/log.err >> /tmp/log
#	echo "------  RUN ----- $(date) -----" | tee -a /tmp/log.err >> /tmp/log
}

test_cleanup()
{
	rm -f /tmp/log /tmp/log.err /tmp/log.shot
}

test_run()
{
	run_header "$1"
	shift
	run_cmd $@
}

test_code()
{
	local rc=0
	test_run "$@" || rc=$?
        if [ $rc -eq 0 ]; then pass
        elif [ $rc -eq 128 ]; then skip
        else fail
        fi
}

test_compare_output()
{
	local msg="$1"; shift
	local exp="$1"; shift
	local rc=0
	test_run "$msg" $@ || rc=$?
	if [ $rc -eq 128 ]; then
		skip
		return
	elif [ $rc -ne 0 ]; then
		fail
	fi

	echo "$exp" | diff -Naup /dev/stdin /tmp/log.shot 1>/tmp/log.compare || rc=$?
        if [ $rc -eq 0 ]; then
		pass
        else
		cat /tmp/log.compare >> /tmp/log.err
		fail
        fi
}

test_sdr_range()
{
	local bus="$1"
	local slave="$2"
	local sdr="$3"
	local min="${4-:-}"
	local max="${5-:-}"
	local rc=0
	run_header "Range check for $sdr @ $slave [${min%%-},${max%%-}]"
	run_cmd_log "sdr_get $bus $slave $sdr"
	sdr_get "$bus" "$slave" "$sdr" | awk -vrc=2 -vvmin=$min -vvmax=$max '
	{
		if (vmin != "-" && $2 < vmin) { rc=1; print $1, $2, "is below", vmin }
		else if (vmax != "-" && $2 > vmax) { rc=1; print $1, $2, "is above", vmax }
		else {
			if (rc == 2) rc = 0
			print $1, $2
		}
	}
	END { exit rc }' 1>/tmp/log.shot || rc=$?
	if [ $rc -eq 0 ]; then
		cat /tmp/log.shot >> /tmp/log
		pass
	else
		cat /tmp/log.shot >> /tmp/log.err
		[ "$rc" -ne 2 ] || echo "Sensor(s) $sdr not found" >> /tmp/log.err
		fail
	fi
}

test_eeprom()
{
	local msg="$1"
	local bus="$2"
	local slave="$(printf "%04x" $3)"
	local drv="$4"
	local eeprom=/sys/bus/i2c/devices/$bus-$slave/eeprom
	local d=$(date)
	# Erasing
	dd if=/dev/zero bs=256 count=1 2>/dev/null | tr '\x00' '\xff' > $eeprom
	printf "$d" > $eeprom
	i2c_del $bus 0x$slave 2>/dev/null ||:
	# ...enable again
	i2c_en $bus 0x$slave ${4:-24c256}
	# ...and check contents
	test_compare_output "$msg" "$d" 'dd if=$eeprom bs=256 count=1 | strings'
	# ...erase
	dd if=/dev/zero bs=256 count=1 2>/dev/null | tr '\x00' '\xff' > $eeprom
	i2c_del $bus 0x$slave 2>/dev/null ||:
}

status()
{
        [ -z "$1" ] || led_on $1
        printf "[\e[${3}$2\e[0m]\n"
	echo "====== $2 ===== $(date) =====" >> /tmp/log
}

fail()
{
	local last
        status "$LED_FAIL" FAIL "1;31m"
	printf "====== FAIL LOG ====================================\n" 1>&2
	last=$(awk '/----------/ { f=NR-1 } END { print NR - f }' /tmp/log.err)
	tail -n${last:-20} /tmp/log.err 1>&2
        exit 1
}

skip()
{
        status '' SKIP "1;33m"
}

pass()
{
        status "$LED_OK" ' OK ' "1;32m"
}
